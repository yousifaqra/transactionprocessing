// Code generated by gowsdl DO NOT EDIT.

package paymentservice

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

type AnyURI string

type NCName string

type ReturnValue string

const (
	ReturnValueSuccess ReturnValue = "Success"

	ReturnValueError_DoesNotExist ReturnValue = "Error_DoesNotExist"

	ReturnValueError_UniqueConstraint ReturnValue = "Error_UniqueConstraint"

	ReturnValueError_Unknown ReturnValue = "Error_Unknown"

	ReturnValueRecurring_Due ReturnValue = "Recurring_Due"
)

type WSBatchStatus string

const (
	WSBatchStatusOpen WSBatchStatus = "Open"

	WSBatchStatusClosing WSBatchStatus = "Closing"

	WSBatchStatusClosed WSBatchStatus = "Closed"

	WSBatchStatusOrphaned WSBatchStatus = "Orphaned"
)

type WSPaymentOrigin string

const (
	WSPaymentOriginInternet WSPaymentOrigin = "Internet"

	WSPaymentOriginTelephone_IVR WSPaymentOrigin = "Telephone_IVR"

	WSPaymentOriginTelephone_Operator WSPaymentOrigin = "Telephone_Operator"

	WSPaymentOriginMailed_In WSPaymentOrigin = "Mailed_In"

	WSPaymentOriginDrop_Box WSPaymentOrigin = "Drop_Box"

	WSPaymentOriginSignature_Faxed WSPaymentOrigin = "Signature_Faxed"

	WSPaymentOriginSignature_Original WSPaymentOrigin = "Signature_Original"

	WSPaymentOriginBounced_Check WSPaymentOrigin = "Bounced_Check"

	WSPaymentOriginBack_Office WSPaymentOrigin = "Back_Office"

	WSPaymentOriginRetail__POS WSPaymentOrigin = "Retail__POS"

	WSPaymentOrigin__NONE WSPaymentOrigin = "__NONE"

	WSPaymentOriginRepresented_Check WSPaymentOrigin = "Represented_Check"

	WSPaymentOriginCorporate_Trade_Exchange WSPaymentOrigin = "Corporate_Trade_Exchange"
)

type WSAccountType string

const (
	WSAccountTypeChecking WSAccountType = "Checking"

	WSAccountTypeSavings WSAccountType = "Savings"

	WSAccountTypeTreasury_Check WSAccountType = "Treasury_Check"

	WSAccountTypeMoney_Order WSAccountType = "Money_Order"

	WSAccountTypeTravelers_Check WSAccountType = "Travelers_Check"

	WSAccountTypeConvenience_Check WSAccountType = "Convenience_Check"

	WSAccountTypeVisa WSAccountType = "Visa"

	WSAccountTypeMasterCard WSAccountType = "MasterCard"

	WSAccountTypeDiscover__Novus WSAccountType = "Discover__Novus"

	WSAccountTypeAmerican_Express WSAccountType = "American_Express"

	WSAccountTypeDiners__Carte_Blanche WSAccountType = "Diners__Carte_Blanche"

	WSAccountTypeEnRoute WSAccountType = "enRoute"

	WSAccountTypeJCB WSAccountType = "JCB"

	WSAccountTypeBank_Card WSAccountType = "Bank_Card"

	WSAccountTypeGift_Card WSAccountType = "Gift_Card"

	WSAccountTypeOn_Us_Card WSAccountType = "On_Us_Card"

	WSAccountTypePayroll_Card WSAccountType = "Payroll_Card"

	WSAccountTypeCashiers_Check WSAccountType = "Cashiers_Check"

	WSAccountType__NONE WSAccountType = "__NONE"
)

type WSOperationType string

const (
	WSOperationTypeSale WSOperationType = "Sale"

	WSOperationTypeAuth WSOperationType = "Auth"

	WSOperationTypeAuth_Only WSOperationType = "Auth_Only"

	WSOperationTypeCredit WSOperationType = "Credit"

	WSOperationType__NONE WSOperationType = "__NONE"

	WSOperationTypeRefund WSOperationType = "Refund"

	WSOperationTypeSDCredit WSOperationType = "SDCredit"

	WSOperationTypeSDSale WSOperationType = "SDSale"
)

type WSSettlementType string

const (
	WSSettlementTypeACH WSSettlementType = "ACH"

	WSSettlementTypeCheck_Image WSSettlementType = "Check_Image"

	WSSettlementTypeCard_Transfer WSSettlementType = "Card_Transfer"

	WSSettlementTypeNone WSSettlementType = "None"
)

type WSTransactionStatus string

const (
	WSTransactionStatusDeclined WSTransactionStatus = "Declined"

	WSTransactionStatusApproved WSTransactionStatus = "Approved"

	WSTransactionStatusError WSTransactionStatus = "Error"

	WSTransactionStatusVoided WSTransactionStatus = "Voided"

	WSTransactionStatusProcessed WSTransactionStatus = "Processed"

	WSTransactionStatusCollected WSTransactionStatus = "Collected"

	WSTransactionStatusAwaiting_Capture WSTransactionStatus = "Awaiting_Capture"

	WSTransactionStatusAwaiting_Approval WSTransactionStatus = "Awaiting_Approval"

	WSTransactionStatusSuspended WSTransactionStatus = "Suspended"

	WSTransactionStatusIn_Collection WSTransactionStatus = "In_Collection"

	WSTransactionStatusIn_Research WSTransactionStatus = "In_Research"

	WSTransactionStatusDisputed WSTransactionStatus = "Disputed"

	WSTransactionStatusUncollected_NSF WSTransactionStatus = "Uncollected_NSF"

	WSTransactionStatusInvalid__Closed_Account WSTransactionStatus = "Invalid__Closed_Account"

	WSTransactionStatusOther_Check21_Returns WSTransactionStatus = "Other_Check21_Returns"

	WSTransactionStatus__NONE WSTransactionStatus = "__NONE"

	WSTransactionStatusResolved WSTransactionStatus = "Resolved"

	WSTransactionStatusUnauthorized WSTransactionStatus = "Unauthorized"
)

type WSSettlementStatus string

const (
	WSSettlementStatusNo_Settlement_Needed WSSettlementStatus = "No_Settlement_Needed"

	WSSettlementStatusTo_Be_Originated WSSettlementStatus = "To_Be_Originated"

	WSSettlementStatusOriginating WSSettlementStatus = "Originating"

	WSSettlementStatusOriginated_Settlement_Pending WSSettlementStatus = "Originated_Settlement_Pending"

	WSSettlementStatusSettling WSSettlementStatus = "Settling"

	WSSettlementStatusSettled WSSettlementStatus = "Settled"

	WSSettlementStatusCharged_Back WSSettlementStatus = "Charged_Back"

	WSSettlementStatus__NONE WSSettlementStatus = "__NONE"

	WSSettlementStatusOriginated_SDACH WSSettlementStatus = "Originated_SDACH"

	WSSettlementStatusSettled_SDACH WSSettlementStatus = "Settled_SDACH"
)

type WSNotificationMethod string

const (
	WSNotificationMethodMerchant_Notify WSNotificationMethod = "Merchant_Notify"

	WSNotificationMethodMerchant_Recording WSNotificationMethod = "Merchant_Recording"

	WSNotificationMethodPostcard WSNotificationMethod = "Postcard"

	WSNotificationMethodEmail WSNotificationMethod = "Email"

	WSNotificationMethodFax WSNotificationMethod = "Fax"
)

type WSFaceFeeType string

const (
	WSFaceFeeType__None WSFaceFeeType = "__None"

	WSFaceFeeTypeFace WSFaceFeeType = "Face"

	WSFaceFeeTypeBill_Convenience_Face WSFaceFeeType = "Bill_Convenience_Face"

	WSFaceFeeTypeCustom1 WSFaceFeeType = "Custom1"

	WSFaceFeeTypeCustom2 WSFaceFeeType = "Custom2"

	WSFaceFeeTypeCustom3 WSFaceFeeType = "Custom3"

	WSFaceFeeTypeNSF_Fee WSFaceFeeType = "NSF_Fee"

	WSFaceFeeTypeConvenience_Fee WSFaceFeeType = "Convenience_Fee"

	WSFaceFeeTypeLate_Fee WSFaceFeeType = "Late_Fee"

	WSFaceFeeTypeBill_Convenience_Fee WSFaceFeeType = "Bill_Convenience_Fee"
)

type WSOwnerApplication string

const (
	WSOwnerApplicationWeb_Service WSOwnerApplication = "Web_Service"

	WSOwnerApplicationRDN WSOwnerApplication = "RDN"

	WSOwnerApplicationRDX WSOwnerApplication = "RDX"

	WSOwnerApplicationRemit_Plus WSOwnerApplication = "Remit_Plus"

	WSOwnerApplicationIPay WSOwnerApplication = "iPay"

	WSOwnerApplicationMoney_Center WSOwnerApplication = "Money_Center"

	WSOwnerApplicationAutoBooks WSOwnerApplication = "AutoBooks"
)

type AuthResponseCode string

const (
	AuthResponseCodeSuccess AuthResponseCode = "Success"

	AuthResponseCodeAccount_Validated AuthResponseCode = "Account_Validated"

	AuthResponseCodeFunds_Available AuthResponseCode = "Funds_Available"

	AuthResponseCodeDuplicate_Transaction AuthResponseCode = "Duplicate_Transaction"

	AuthResponseCodeDeclined AuthResponseCode = "Declined"

	AuthResponseCodeData_Not_Valid AuthResponseCode = "Data_Not_Valid"

	AuthResponseCodeNSF AuthResponseCode = "NSF"

	AuthResponseCodeUncollected AuthResponseCode = "Uncollected"

	AuthResponseCodeFraud_Multiple AuthResponseCode = "Fraud_Multiple"

	AuthResponseCodeFraud_Single AuthResponseCode = "Fraud_Single"

	AuthResponseCodeStop_Payment AuthResponseCode = "Stop_Payment"

	AuthResponseCodeNon_Participant AuthResponseCode = "Non_Participant"

	AuthResponseCodeVelocity_Count AuthResponseCode = "Velocity_Count"

	AuthResponseCodeVelocity_Amount AuthResponseCode = "Velocity_Amount"

	AuthResponseCodeLaw_Prohibits AuthResponseCode = "Law_Prohibits"

	AuthResponseCodeCustomer_Opt_Out_All AuthResponseCode = "Customer_Opt_Out_All"

	AuthResponseCodeCustomer_Opt_Out_Conversion AuthResponseCode = "Customer_Opt_Out_Conversion"

	AuthResponseCodeMerchant_Opt_Out_Customer AuthResponseCode = "Merchant_Opt_Out_Customer"

	AuthResponseCodeAVS_Declined AuthResponseCode = "AVS_Declined"

	AuthResponseCodeCCVS_Declined AuthResponseCode = "CCVS_Declined"

	AuthResponseCodeExpired AuthResponseCode = "Expired"

	AuthResponseCodeAuthorizer_Supressed_Data AuthResponseCode = "Authorizer_Supressed_Data"

	AuthResponseCodeAccount_Closed AuthResponseCode = "Account_Closed"

	AuthResponseCodeAccount_Invalid AuthResponseCode = "Account_Invalid"

	AuthResponseCodeAccount_Not_ACHable AuthResponseCode = "Account_Not_ACHable"

	AuthResponseCodeAccount_Holder_Deceased AuthResponseCode = "Account_Holder_Deceased"

	AuthResponseCodeAccount_Frozen AuthResponseCode = "Account_Frozen"

	AuthResponseCodeAccount_Not_DDA AuthResponseCode = "Account_Not_DDA"

	AuthResponseCodeAccount_Invalid_Routing AuthResponseCode = "Account_Invalid_Routing"

	AuthResponseCodeAccount_New AuthResponseCode = "Account_New"

	AuthResponseCodeAccount_Unknown AuthResponseCode = "Account_Unknown"

	AuthResponseCodeAccount_No_Debits AuthResponseCode = "Account_No_Debits"

	AuthResponseCodeManager_Approval_Required AuthResponseCode = "Manager_Approval_Required"

	AuthResponseCodeProcessor_Approval_Required AuthResponseCode = "Processor_Approval_Required"

	AuthResponseCode__ERROR_BEGIN AuthResponseCode = "__ERROR_BEGIN"

	AuthResponseCodeError_Invalid_Format AuthResponseCode = "Error_Invalid_Format"

	AuthResponseCodeError_Timeout AuthResponseCode = "Error_Timeout"

	AuthResponseCodeError_Internal AuthResponseCode = "Error_Internal"

	AuthResponseCodeError_Connection AuthResponseCode = "Error_Connection"

	AuthResponseCodeError_Not_Supported AuthResponseCode = "Error_Not_Supported"

	AuthResponseCodeError_Not_Subscribed AuthResponseCode = "Error_Not_Subscribed"

	AuthResponseCodeError_Batch_Closed AuthResponseCode = "Error_Batch_Closed"

	AuthResponseCodeError_Invalid_Batch AuthResponseCode = "Error_Invalid_Batch"

	AuthResponseCodeError_Invalid_Terminal AuthResponseCode = "Error_Invalid_Terminal"

	AuthResponseCodeError_Transaction_Not_Found AuthResponseCode = "Error_Transaction_Not_Found"

	AuthResponseCodeError_Terminal_Disabled AuthResponseCode = "Error_Terminal_Disabled"

	AuthResponseCodeError_Invalid_State AuthResponseCode = "Error_Invalid_State"

	AuthResponseCodeError_MaxData_Exceeded AuthResponseCode = "Error_MaxData_Exceeded"

	AuthResponseCodeError_Unspecified AuthResponseCode = "Error_Unspecified"

	AuthResponseCode__NONE AuthResponseCode = "__NONE"
)

type SettlementType string

const (
	SettlementTypeNone SettlementType = "None"

	SettlementTypeACH SettlementType = "ACH"

	SettlementTypePaper_Draft SettlementType = "Paper_Draft"

	SettlementTypeImage_Replacement_Document SettlementType = "Image_Replacement_Document"

	SettlementTypeWire_Transfer SettlementType = "Wire_Transfer"

	SettlementTypeCard_Transfer SettlementType = "Card_Transfer"

	SettlementTypeImage_Exchange SettlementType = "Image_Exchange"

	SettlementTypeOnline_Payment SettlementType = "Online_Payment"

	SettlementTypeThird_Party SettlementType = "Third_Party"

	SettlementType__NONE SettlementType = "__NONE"
)

type WSAcctVerifyPaymentOrigin string

const (
	WSAcctVerifyPaymentOriginInternet WSAcctVerifyPaymentOrigin = "Internet"

	WSAcctVerifyPaymentOriginTelephone_IVR WSAcctVerifyPaymentOrigin = "Telephone_IVR"

	WSAcctVerifyPaymentOriginTelephone_Operator WSAcctVerifyPaymentOrigin = "Telephone_Operator"

	WSAcctVerifyPaymentOriginSignature_Faxed WSAcctVerifyPaymentOrigin = "Signature_Faxed"

	WSAcctVerifyPaymentOriginSignature_Original WSAcctVerifyPaymentOrigin = "Signature_Original"
)

type WSAcctVerifyAccountType string

const (
	WSAcctVerifyAccountTypeChecking WSAcctVerifyAccountType = "Checking"

	WSAcctVerifyAccountTypeSavings WSAcctVerifyAccountType = "Savings"
)

type WSAcctVerifyOperationType string

const (
	WSAcctVerifyOperationTypeSale WSAcctVerifyOperationType = "Sale"

	WSAcctVerifyOperationTypeCredit WSAcctVerifyOperationType = "Credit"

	WSAcctVerifyOperationTypeSDCredit WSAcctVerifyOperationType = "SDCredit"

	WSAcctVerifyOperationTypeSDSale WSAcctVerifyOperationType = "SDSale"
)

type WSRecurringPaymentOrigin string

const (
	WSRecurringPaymentOriginInternet WSRecurringPaymentOrigin = "Internet"

	WSRecurringPaymentOriginTelephone_IVR WSRecurringPaymentOrigin = "Telephone_IVR"

	WSRecurringPaymentOriginTelephone_Operator WSRecurringPaymentOrigin = "Telephone_Operator"

	WSRecurringPaymentOriginSignature_Faxed WSRecurringPaymentOrigin = "Signature_Faxed"

	WSRecurringPaymentOriginSignature_Original WSRecurringPaymentOrigin = "Signature_Original"

	WSRecurringPaymentOriginCorporate_Trade_Exchange WSRecurringPaymentOrigin = "Corporate_Trade_Exchange"
)

type WSRecurringAccountType string

const (
	WSRecurringAccountTypeSavings WSRecurringAccountType = "Savings"

	WSRecurringAccountTypeChecking WSRecurringAccountType = "Checking"
)

type CreateProcessingBatch struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV CreateProcessingBatch"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	EntityId int32 `xml:"entityId,omitempty" json:"entityId,omitempty"`

	LocationId string `xml:"locationId,omitempty" json:"locationId,omitempty"`

	TerminalNumberIfKnown string `xml:"terminalNumberIfKnown,omitempty" json:"terminalNumberIfKnown,omitempty"`

	BatchNumberToCreate string `xml:"batchNumberToCreate,omitempty" json:"batchNumberToCreate,omitempty"`

	AutoCloseDateTime soap.XSDDateTime `xml:"autoCloseDateTime,omitempty" json:"autoCloseDateTime,omitempty"`

	IsAutoCloseDateTimeRequired bool `xml:"isAutoCloseDateTimeRequired,omitempty" json:"isAutoCloseDateTimeRequired,omitempty"`

	IsSameDayACH *bool `xml:"isSameDayACH,omitempty" json:"isSameDayACH,omitempty"`
}

type CreateProcessingBatchResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV CreateProcessingBatchResponse"`

	CreateProcessingBatchResult *WSUpdateResult `xml:"CreateProcessingBatchResult,omitempty" json:"CreateProcessingBatchResult,omitempty"`
}

type CreateProcessingBatchWithDepositSlipAuxOnUs struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV CreateProcessingBatchWithDepositSlipAuxOnUs"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	EntityId int32 `xml:"entityId,omitempty" json:"entityId,omitempty"`

	LocationId int32 `xml:"locationId,omitempty" json:"locationId,omitempty"`

	TerminalNumberIfKnown string `xml:"terminalNumberIfKnown,omitempty" json:"terminalNumberIfKnown,omitempty"`

	BatchNumberToCreate string `xml:"batchNumberToCreate,omitempty" json:"batchNumberToCreate,omitempty"`

	AutoCloseDateTime soap.XSDDateTime `xml:"autoCloseDateTime,omitempty" json:"autoCloseDateTime,omitempty"`

	IsAutoCloseDateTimeRequired bool `xml:"isAutoCloseDateTimeRequired,omitempty" json:"isAutoCloseDateTimeRequired,omitempty"`

	DepositSlipId int64 `xml:"depositSlipId,omitempty" json:"depositSlipId,omitempty"`

	IsSameDayACH *bool `xml:"isSameDayACH,omitempty" json:"isSameDayACH,omitempty"`
}

type CreateProcessingBatchWithDepositSlipAuxOnUsResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV CreateProcessingBatchWithDepositSlipAuxOnUsResponse"`

	CreateProcessingBatchWithDepositSlipAuxOnUsResult *WSUpdateResult `xml:"CreateProcessingBatchWithDepositSlipAuxOnUsResult,omitempty" json:"CreateProcessingBatchWithDepositSlipAuxOnUsResult,omitempty"`
}

type CloseProcessingBatch struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV CloseProcessingBatch"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	EntityId int32 `xml:"entityId,omitempty" json:"entityId,omitempty"`

	BatchNumber string `xml:"batchNumber,omitempty" json:"batchNumber,omitempty"`
}

type CloseProcessingBatchResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV CloseProcessingBatchResponse"`

	CloseProcessingBatchResult *WSUpdateResult `xml:"CloseProcessingBatchResult,omitempty" json:"CloseProcessingBatchResult,omitempty"`
}

type GetBatch struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV GetBatch"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	EntityId int32 `xml:"entityId,omitempty" json:"entityId,omitempty"`

	BatchNumber string `xml:"batchNumber,omitempty" json:"batchNumber,omitempty"`
}

type GetBatchResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV GetBatchResponse"`

	GetBatchResult *WSBatch `xml:"GetBatchResult,omitempty" json:"GetBatchResult,omitempty"`
}

type GetAllOpenBatches struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV GetAllOpenBatches"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	EntityId int32 `xml:"entityId,omitempty" json:"entityId,omitempty"`
}

type GetAllOpenBatchesResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV GetAllOpenBatchesResponse"`

	GetAllOpenBatchesResult *ArrayOfWSBatch `xml:"GetAllOpenBatchesResult,omitempty" json:"GetAllOpenBatchesResult,omitempty"`
}

type CloseAllOpenBatches struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV CloseAllOpenBatches"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	EntityId int32 `xml:"entityId,omitempty" json:"entityId,omitempty"`
}

type CloseAllOpenBatchesResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV CloseAllOpenBatchesResponse"`

	CloseAllOpenBatchesResult *WSUpdateResult `xml:"CloseAllOpenBatchesResult,omitempty" json:"CloseAllOpenBatchesResult,omitempty"`
}

type UpdateAutoCloseDateTime struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV UpdateAutoCloseDateTime"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	EntityId int32 `xml:"entityId,omitempty" json:"entityId,omitempty"`

	BatchNumber string `xml:"batchNumber,omitempty" json:"batchNumber,omitempty"`

	AutoCloseDateTime soap.XSDDateTime `xml:"autoCloseDateTime,omitempty" json:"autoCloseDateTime,omitempty"`
}

type UpdateAutoCloseDateTimeResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV UpdateAutoCloseDateTimeResponse"`

	UpdateAutoCloseDateTimeResult *WSUpdateResult `xml:"UpdateAutoCloseDateTimeResult,omitempty" json:"UpdateAutoCloseDateTimeResult,omitempty"`
}

type AuthorizeTransactionWithCustomer struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV AuthorizeTransactionWithCustomer"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	Customer *WSCustomer `xml:"customer,omitempty" json:"customer,omitempty"`

	CreateCustomerIfDoesNotExists bool `xml:"createCustomerIfDoesNotExists,omitempty" json:"createCustomerIfDoesNotExists,omitempty"`

	UpdateCustomerIfExists bool `xml:"updateCustomerIfExists,omitempty" json:"updateCustomerIfExists,omitempty"`

	Transaction *WSTransaction `xml:"transaction,omitempty" json:"transaction,omitempty"`

	OwnerApplication *WSOwnerApplication `xml:"ownerApplication,omitempty" json:"ownerApplication,omitempty"`

	HoldDays *byte `xml:"holdDays,omitempty" json:"holdDays,omitempty"`

	BypassSmartDetect *bool `xml:"bypassSmartDetect,omitempty" json:"bypassSmartDetect,omitempty"`
}

type AuthorizeTransactionWithCustomerResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV AuthorizeTransactionWithCustomerResponse"`

	AuthorizeTransactionWithCustomerResult *WSResponseMessage `xml:"AuthorizeTransactionWithCustomerResult,omitempty" json:"AuthorizeTransactionWithCustomerResult,omitempty"`
}

type AuthorizeTransaction struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV AuthorizeTransaction"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	Transaction *WSTransaction `xml:"transaction,omitempty" json:"transaction,omitempty"`

	OwnerApplication *WSOwnerApplication `xml:"ownerApplication,omitempty" json:"ownerApplication,omitempty"`

	HoldDays *byte `xml:"holdDays,omitempty" json:"holdDays,omitempty"`

	BypassSmartDetect *bool `xml:"bypassSmartDetect,omitempty" json:"bypassSmartDetect,omitempty"`
}

type AuthorizeTransactionResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV AuthorizeTransactionResponse"`

	AuthorizeTransactionResult *WSResponseMessage `xml:"AuthorizeTransactionResult,omitempty" json:"AuthorizeTransactionResult,omitempty"`
}

type AuthorizeAcctVerifyTransaction struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV AuthorizeAcctVerifyTransaction"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	Transaction *WSAcctVerifyTransaction `xml:"transaction,omitempty" json:"transaction,omitempty"`

	HoldDays *byte `xml:"holdDays,omitempty" json:"holdDays,omitempty"`

	BypassSmartDetect *bool `xml:"bypassSmartDetect,omitempty" json:"bypassSmartDetect,omitempty"`
}

type AuthorizeAcctVerifyTransactionResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV AuthorizeAcctVerifyTransactionResponse"`

	AuthorizeAcctVerifyTransactionResult *WSResponseMessage `xml:"AuthorizeAcctVerifyTransactionResult,omitempty" json:"AuthorizeAcctVerifyTransactionResult,omitempty"`
}

type VoidTransaction struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV VoidTransaction"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	EntityId int32 `xml:"entityId,omitempty" json:"entityId,omitempty"`

	LocationId int32 `xml:"locationId,omitempty" json:"locationId,omitempty"`

	OriginalReferenceNumber string `xml:"originalReferenceNumber,omitempty" json:"originalReferenceNumber,omitempty"`
}

type VoidTransactionResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV VoidTransactionResponse"`

	VoidTransactionResult *WSResponseMessage `xml:"VoidTransactionResult,omitempty" json:"VoidTransactionResult,omitempty"`
}

type RefundTransaction struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV RefundTransaction"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	EntityId int32 `xml:"entityId,omitempty" json:"entityId,omitempty"`

	LocationId int32 `xml:"locationId,omitempty" json:"locationId,omitempty"`

	OriginalReferenceNumber string `xml:"originalReferenceNumber,omitempty" json:"originalReferenceNumber,omitempty"`
}

type RefundTransactionResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV RefundTransactionResponse"`

	RefundTransactionResult *WSResponseMessage `xml:"RefundTransactionResult,omitempty" json:"RefundTransactionResult,omitempty"`
}

type RefundCardTransaction struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV RefundCardTransaction"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	EntityId int32 `xml:"entityId,omitempty" json:"entityId,omitempty"`

	LocationId int32 `xml:"locationId,omitempty" json:"locationId,omitempty"`

	OriginalReferenceNumber string `xml:"originalReferenceNumber,omitempty" json:"originalReferenceNumber,omitempty"`

	RefundAmount float64 `xml:"refundAmount,omitempty" json:"refundAmount,omitempty"`
}

type RefundCardTransactionResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV RefundCardTransactionResponse"`

	RefundCardTransactionResult *WSResponseMessage `xml:"RefundCardTransactionResult,omitempty" json:"RefundCardTransactionResult,omitempty"`
}

type CaptureTransaction struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV CaptureTransaction"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	EntityId int32 `xml:"entityId,omitempty" json:"entityId,omitempty"`

	LocationId int32 `xml:"locationId,omitempty" json:"locationId,omitempty"`

	OriginalReferenceNumber string `xml:"originalReferenceNumber,omitempty" json:"originalReferenceNumber,omitempty"`

	CaptureAmount float64 `xml:"captureAmount,omitempty" json:"captureAmount,omitempty"`
}

type CaptureTransactionResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV CaptureTransactionResponse"`

	CaptureTransactionResult *WSResponseMessage `xml:"CaptureTransactionResult,omitempty" json:"CaptureTransactionResult,omitempty"`
}

type AuthorizeRecurringTransaction struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV AuthorizeRecurringTransaction"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	Customer *WSCustomer `xml:"customer,omitempty" json:"customer,omitempty"`

	CreateCustomerIfDoesNotExists bool `xml:"createCustomerIfDoesNotExists,omitempty" json:"createCustomerIfDoesNotExists,omitempty"`

	UpdateCustomerIfExists bool `xml:"updateCustomerIfExists,omitempty" json:"updateCustomerIfExists,omitempty"`

	RecurringTransaction *WSRecurringTransaction `xml:"recurringTransaction,omitempty" json:"recurringTransaction,omitempty"`

	BypassSmartDetect *bool `xml:"bypassSmartDetect,omitempty" json:"bypassSmartDetect,omitempty"`
}

type AuthorizeRecurringTransactionResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV AuthorizeRecurringTransactionResponse"`

	AuthorizeRecurringTransactionResult *WSResponseMessage `xml:"AuthorizeRecurringTransactionResult,omitempty" json:"AuthorizeRecurringTransactionResult,omitempty"`
}

type AuthorizeTransactionWithAddenda struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV AuthorizeTransactionWithAddenda"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	AddendaTransaction *WSAddendaTransaction `xml:"addendaTransaction,omitempty" json:"addendaTransaction,omitempty"`
}

type AuthorizeTransactionWithAddendaResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV AuthorizeTransactionWithAddendaResponse"`

	AuthorizeTransactionWithAddendaResult *WSResponseMessage `xml:"AuthorizeTransactionWithAddendaResult,omitempty" json:"AuthorizeTransactionWithAddendaResult,omitempty"`
}

type GetTransaction struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV GetTransaction"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	EntityId int32 `xml:"entityId,omitempty" json:"entityId,omitempty"`

	TransactionReferenceNumber string `xml:"transactionReferenceNumber,omitempty" json:"transactionReferenceNumber,omitempty"`

	IncludeImages bool `xml:"includeImages,omitempty" json:"includeImages,omitempty"`
}

type GetTransactionResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV GetTransactionResponse"`

	GetTransactionResult *WSTransaction `xml:"GetTransactionResult,omitempty" json:"GetTransactionResult,omitempty"`
}

type GetTransactionByField1 struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV GetTransactionByField1"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	EntityId int32 `xml:"entityId,omitempty" json:"entityId,omitempty"`

	TransField1 string `xml:"TransField1,omitempty" json:"TransField1,omitempty"`

	IncludeImages bool `xml:"includeImages,omitempty" json:"includeImages,omitempty"`
}

type GetTransactionByField1Response struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV GetTransactionByField1Response"`

	GetTransactionByField1Result *ArrayOfWSTransaction `xml:"GetTransactionByField1Result,omitempty" json:"GetTransactionByField1Result,omitempty"`
}

type GetTransactionByTransactionNumber struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV GetTransactionByTransactionNumber"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	EntityId int32 `xml:"entityId,omitempty" json:"entityId,omitempty"`

	TransactionNumber string `xml:"transactionNumber,omitempty" json:"transactionNumber,omitempty"`

	IncludeImages bool `xml:"includeImages,omitempty" json:"includeImages,omitempty"`
}

type GetTransactionByTransactionNumberResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV GetTransactionByTransactionNumberResponse"`

	GetTransactionByTransactionNumberResult *WSTransaction `xml:"GetTransactionByTransactionNumberResult,omitempty" json:"GetTransactionByTransactionNumberResult,omitempty"`
}

type GetTransactionByTransactionNumber2 struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV GetTransactionByTransactionNumber2"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	EntityId int32 `xml:"entityId,omitempty" json:"entityId,omitempty"`

	TransactionNumber string `xml:"transactionNumber,omitempty" json:"transactionNumber,omitempty"`

	IncludeImages bool `xml:"includeImages,omitempty" json:"includeImages,omitempty"`
}

type GetTransactionByTransactionNumber2Response struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV GetTransactionByTransactionNumber2Response"`

	GetTransactionByTransactionNumber2Result *WSTransaction2 `xml:"GetTransactionByTransactionNumber2Result,omitempty" json:"GetTransactionByTransactionNumber2Result,omitempty"`
}

type GetTransactionWithAddenda struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV GetTransactionWithAddenda"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	EntityId int32 `xml:"entityId,omitempty" json:"entityId,omitempty"`

	TransactionReferenceNumber string `xml:"transactionReferenceNumber,omitempty" json:"transactionReferenceNumber,omitempty"`
}

type GetTransactionWithAddendaResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV GetTransactionWithAddendaResponse"`

	GetTransactionWithAddendaResult *WSAddendaTransaction `xml:"GetTransactionWithAddendaResult,omitempty" json:"GetTransactionWithAddendaResult,omitempty"`
}

type TestCredentials struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV TestCredentials"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	EntityId int32 `xml:"entityId,omitempty" json:"entityId,omitempty"`

	LocationId string `xml:"locationId,omitempty" json:"locationId,omitempty"`

	TerminalNumber string `xml:"terminalNumber,omitempty" json:"terminalNumber,omitempty"`
}

type TestCredentialsResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV TestCredentialsResponse"`

	TestCredentialsResult *WSUpdateResult `xml:"TestCredentialsResult,omitempty" json:"TestCredentialsResult,omitempty"`
}

type TestConnection struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV TestConnection"`
}

type TestConnectionResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV TestConnectionResponse"`

	TestConnectionResult bool `xml:"TestConnectionResult,omitempty" json:"TestConnectionResult,omitempty"`
}

type ValidateAccount struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV ValidateAccount"`

	StoreId int64 `xml:"storeId,omitempty" json:"storeId,omitempty"`

	StoreKey string `xml:"storeKey,omitempty" json:"storeKey,omitempty"`

	EntityId int32 `xml:"entityId,omitempty" json:"entityId,omitempty"`

	LocationId int32 `xml:"locationId,omitempty" json:"locationId,omitempty"`

	AccountNumber string `xml:"accountNumber,omitempty" json:"accountNumber,omitempty"`

	RoutingNumber int32 `xml:"routingNumber,omitempty" json:"routingNumber,omitempty"`
}

type ValidateAccountResponse struct {
	XMLName xml.Name `xml:"https://ssl.selectpayment.com/PV ValidateAccountResponse"`

	ValidateAccountResult *WSResponseMessage `xml:"ValidateAccountResult,omitempty" json:"ValidateAccountResult,omitempty"`
}

type WSUpdateResult struct {
	ReturnValue *ReturnValue `xml:"returnValue,omitempty" json:"returnValue,omitempty"`

	Message string `xml:"message,omitempty" json:"message,omitempty"`
}

type WSBatch struct {
	EntityId int32 `xml:"EntityId,omitempty" json:"EntityId,omitempty"`

	BatchNumber string `xml:"BatchNumber,omitempty" json:"BatchNumber,omitempty"`

	BatchStatus *WSBatchStatus `xml:"BatchStatus,omitempty" json:"BatchStatus,omitempty"`

	CreateDateTime soap.XSDDateTime `xml:"CreateDateTime,omitempty" json:"CreateDateTime,omitempty"`

	ClosedDateTime soap.XSDDateTime `xml:"ClosedDateTime,omitempty" json:"ClosedDateTime,omitempty"`

	DebitCount int32 `xml:"DebitCount,omitempty" json:"DebitCount,omitempty"`

	DebitAmount float64 `xml:"DebitAmount,omitempty" json:"DebitAmount,omitempty"`

	CreditCount int32 `xml:"CreditCount,omitempty" json:"CreditCount,omitempty"`

	CreditAmount float64 `xml:"CreditAmount,omitempty" json:"CreditAmount,omitempty"`

	AuthorizedCount int32 `xml:"AuthorizedCount,omitempty" json:"AuthorizedCount,omitempty"`

	DeclinedCount int32 `xml:"DeclinedCount,omitempty" json:"DeclinedCount,omitempty"`

	VoidCount int32 `xml:"VoidCount,omitempty" json:"VoidCount,omitempty"`

	CreatedByUserId int64 `xml:"CreatedByUserId,omitempty" json:"CreatedByUserId,omitempty"`

	ClosedByUserId int64 `xml:"ClosedByUserId,omitempty" json:"ClosedByUserId,omitempty"`

	AutoCloseDateTime soap.XSDDateTime `xml:"AutoCloseDateTime,omitempty" json:"AutoCloseDateTime,omitempty"`

	IsSameDayACH bool `xml:"IsSameDayACH,omitempty" json:"IsSameDayACH,omitempty"`
}

type ArrayOfWSBatch struct {
	WSBatch []*WSBatch `xml:"WSBatch,omitempty" json:"WSBatch,omitempty"`
}

type WSCustomer struct {
	EntityId int32 `xml:"EntityId,omitempty" json:"EntityId,omitempty"`

	IsCompany bool `xml:"IsCompany,omitempty" json:"IsCompany,omitempty"`

	CustomerNumber string `xml:"CustomerNumber,omitempty" json:"CustomerNumber,omitempty"`

	Field1 string `xml:"Field1,omitempty" json:"Field1,omitempty"`

	Field2 string `xml:"Field2,omitempty" json:"Field2,omitempty"`

	Field3 string `xml:"Field3,omitempty" json:"Field3,omitempty"`

	FirstName string `xml:"FirstName,omitempty" json:"FirstName,omitempty"`

	LastName string `xml:"LastName,omitempty" json:"LastName,omitempty"`

	Email string `xml:"Email,omitempty" json:"Email,omitempty"`

	OtherEmail string `xml:"OtherEmail,omitempty" json:"OtherEmail,omitempty"`

	Address1 string `xml:"Address1,omitempty" json:"Address1,omitempty"`

	Address2 string `xml:"Address2,omitempty" json:"Address2,omitempty"`

	City string `xml:"City,omitempty" json:"City,omitempty"`

	StateRegion string `xml:"StateRegion,omitempty" json:"StateRegion,omitempty"`

	PostalCode string `xml:"PostalCode,omitempty" json:"PostalCode,omitempty"`

	Country string `xml:"Country,omitempty" json:"Country,omitempty"`

	EveningPhone string `xml:"EveningPhone,omitempty" json:"EveningPhone,omitempty"`

	EveningExt string `xml:"EveningExt,omitempty" json:"EveningExt,omitempty"`

	DaytimePhone string `xml:"DaytimePhone,omitempty" json:"DaytimePhone,omitempty"`

	DaytimeExt string `xml:"DaytimeExt,omitempty" json:"DaytimeExt,omitempty"`

	Fax string `xml:"Fax,omitempty" json:"Fax,omitempty"`

	SSN string `xml:"SSN,omitempty" json:"SSN,omitempty"`

	DLState string `xml:"DLState,omitempty" json:"DLState,omitempty"`

	DLNumber string `xml:"DLNumber,omitempty" json:"DLNumber,omitempty"`
}

type WSTransaction struct {
	EntityId int32 `xml:"EntityId,omitempty" json:"EntityId,omitempty"`

	LocationId int32 `xml:"LocationId,omitempty" json:"LocationId,omitempty"`

	PaymentOrigin *WSPaymentOrigin `xml:"PaymentOrigin,omitempty" json:"PaymentOrigin,omitempty"`

	AccountType *WSAccountType `xml:"AccountType,omitempty" json:"AccountType,omitempty"`

	OperationType *WSOperationType `xml:"OperationType,omitempty" json:"OperationType,omitempty"`

	SettlementType *WSSettlementType `xml:"SettlementType,omitempty" json:"SettlementType,omitempty"`

	TransactionStatus *WSTransactionStatus `xml:"TransactionStatus,omitempty" json:"TransactionStatus,omitempty"`

	SettlementStatus *WSSettlementStatus `xml:"SettlementStatus,omitempty" json:"SettlementStatus,omitempty"`

	EffectiveDate soap.XSDDateTime `xml:"EffectiveDate,omitempty" json:"EffectiveDate,omitempty"`

	Description string `xml:"Description,omitempty" json:"Description,omitempty"`

	TotalAmount float64 `xml:"TotalAmount,omitempty" json:"TotalAmount,omitempty"`

	TaxAmount float64 `xml:"TaxAmount,omitempty" json:"TaxAmount,omitempty"`

	ShippingAmount float64 `xml:"ShippingAmount,omitempty" json:"ShippingAmount,omitempty"`

	Sale string `xml:"Sale,omitempty" json:"Sale,omitempty"`

	ConvenienceFeeAmount string `xml:"ConvenienceFeeAmount,omitempty" json:"ConvenienceFeeAmount,omitempty"`

	BatchNumber string `xml:"BatchNumber,omitempty" json:"BatchNumber,omitempty"`

	TerminalNumber string `xml:"TerminalNumber,omitempty" json:"TerminalNumber,omitempty"`

	TransactionNumber string `xml:"TransactionNumber,omitempty" json:"TransactionNumber,omitempty"`

	Field1 string `xml:"Field1,omitempty" json:"Field1,omitempty"`

	Field2 string `xml:"Field2,omitempty" json:"Field2,omitempty"`

	Field3 string `xml:"Field3,omitempty" json:"Field3,omitempty"`

	CheckMICRLine string `xml:"CheckMICRLine,omitempty" json:"CheckMICRLine,omitempty"`

	CheckMICRSymbolSet string `xml:"CheckMICRSymbolSet,omitempty" json:"CheckMICRSymbolSet,omitempty"`

	RoutingNumber string `xml:"RoutingNumber,omitempty" json:"RoutingNumber,omitempty"`

	AccountNumber string `xml:"AccountNumber,omitempty" json:"AccountNumber,omitempty"`

	CheckNumber string `xml:"CheckNumber,omitempty" json:"CheckNumber,omitempty"`

	SwipeTrack1 string `xml:"SwipeTrack1,omitempty" json:"SwipeTrack1,omitempty"`

	SwipeTrack2 string `xml:"SwipeTrack2,omitempty" json:"SwipeTrack2,omitempty"`

	SwipeTrack3 string `xml:"SwipeTrack3,omitempty" json:"SwipeTrack3,omitempty"`

	CardExpiresMonth byte `xml:"CardExpiresMonth,omitempty" json:"CardExpiresMonth,omitempty"`

	CardExpiresYear int16 `xml:"CardExpiresYear,omitempty" json:"CardExpiresYear,omitempty"`

	CVVNumber int32 `xml:"CVVNumber,omitempty" json:"CVVNumber,omitempty"`

	IsBusinessPayment bool `xml:"IsBusinessPayment,omitempty" json:"IsBusinessPayment,omitempty"`

	NameOnAccount string `xml:"NameOnAccount,omitempty" json:"NameOnAccount,omitempty"`

	BillingAddress1 string `xml:"BillingAddress1,omitempty" json:"BillingAddress1,omitempty"`

	BillingAddress2 string `xml:"BillingAddress2,omitempty" json:"BillingAddress2,omitempty"`

	BillingCity string `xml:"BillingCity,omitempty" json:"BillingCity,omitempty"`

	BillingStateRegion string `xml:"BillingStateRegion,omitempty" json:"BillingStateRegion,omitempty"`

	BillingPostalCode string `xml:"BillingPostalCode,omitempty" json:"BillingPostalCode,omitempty"`

	BillingCountry string `xml:"BillingCountry,omitempty" json:"BillingCountry,omitempty"`

	BillingPhone string `xml:"BillingPhone,omitempty" json:"BillingPhone,omitempty"`

	IpAddressOfOriginator string `xml:"IpAddressOfOriginator,omitempty" json:"IpAddressOfOriginator,omitempty"`

	EmailAddress string `xml:"EmailAddress,omitempty" json:"EmailAddress,omitempty"`

	SSN string `xml:"SSN,omitempty" json:"SSN,omitempty"`

	DLState string `xml:"DLState,omitempty" json:"DLState,omitempty"`

	DLNumber string `xml:"DLNumber,omitempty" json:"DLNumber,omitempty"`

	NotificationMethod *WSNotificationMethod `xml:"NotificationMethod,omitempty" json:"NotificationMethod,omitempty"`

	FaceFeeType *WSFaceFeeType `xml:"FaceFeeType,omitempty" json:"FaceFeeType,omitempty"`

	CheckFrontImageBytes_TiffG4 []byte `xml:"CheckFrontImageBytes_TiffG4,omitempty" json:"CheckFrontImageBytes_TiffG4,omitempty"`

	CheckRearImageBytes_TiffG4 []byte `xml:"CheckRearImageBytes_TiffG4,omitempty" json:"CheckRearImageBytes_TiffG4,omitempty"`

	OptionalThirdImageBytes_TiffG4 []byte `xml:"OptionalThirdImageBytes_TiffG4,omitempty" json:"OptionalThirdImageBytes_TiffG4,omitempty"`

	OptionalThirdImageDescription string `xml:"OptionalThirdImageDescription,omitempty" json:"OptionalThirdImageDescription,omitempty"`

	PresentmentNumber int32 `xml:"PresentmentNumber,omitempty" json:"PresentmentNumber,omitempty"`
}

type WSResponseMessage struct {
	ReferenceNumber string `xml:"ReferenceNumber,omitempty" json:"ReferenceNumber,omitempty"`

	Success bool `xml:"Success,omitempty" json:"Success,omitempty"`

	Error bool `xml:"Error,omitempty" json:"Error,omitempty"`

	ResponseCode *AuthResponseCode `xml:"ResponseCode,omitempty" json:"ResponseCode,omitempty"`

	ActualDate soap.XSDDateTime `xml:"ActualDate,omitempty" json:"ActualDate,omitempty"`

	ResponseMessage string `xml:"ResponseMessage,omitempty" json:"ResponseMessage,omitempty"`

	OriginatedAs *SettlementType `xml:"OriginatedAs,omitempty" json:"OriginatedAs,omitempty"`
}

type WSAcctVerifyTransaction struct {
	EntityId int32 `xml:"EntityId,omitempty" json:"EntityId,omitempty"`

	LocationId int32 `xml:"LocationId,omitempty" json:"LocationId,omitempty"`

	PaymentOrigin *WSAcctVerifyPaymentOrigin `xml:"PaymentOrigin,omitempty" json:"PaymentOrigin,omitempty"`

	AccountType *WSAcctVerifyAccountType `xml:"AccountType,omitempty" json:"AccountType,omitempty"`

	OperationType *WSAcctVerifyOperationType `xml:"OperationType,omitempty" json:"OperationType,omitempty"`

	EffectiveDate soap.XSDDateTime `xml:"EffectiveDate,omitempty" json:"EffectiveDate,omitempty"`

	Description string `xml:"Description,omitempty" json:"Description,omitempty"`

	TotalAmount float64 `xml:"TotalAmount,omitempty" json:"TotalAmount,omitempty"`

	BatchNumber string `xml:"BatchNumber,omitempty" json:"BatchNumber,omitempty"`

	TransactionNumber string `xml:"TransactionNumber,omitempty" json:"TransactionNumber,omitempty"`

	Field1 string `xml:"Field1,omitempty" json:"Field1,omitempty"`

	Field2 string `xml:"Field2,omitempty" json:"Field2,omitempty"`

	RoutingNumber string `xml:"RoutingNumber,omitempty" json:"RoutingNumber,omitempty"`

	AccountNumber string `xml:"AccountNumber,omitempty" json:"AccountNumber,omitempty"`

	CheckNumber string `xml:"CheckNumber,omitempty" json:"CheckNumber,omitempty"`

	IsBusinessPayment bool `xml:"IsBusinessPayment,omitempty" json:"IsBusinessPayment,omitempty"`

	NameOnAccount string `xml:"NameOnAccount,omitempty" json:"NameOnAccount,omitempty"`

	IpAddressOfOriginator string `xml:"IpAddressOfOriginator,omitempty" json:"IpAddressOfOriginator,omitempty"`

	EmailAddress string `xml:"EmailAddress,omitempty" json:"EmailAddress,omitempty"`

	SSN string `xml:"SSN,omitempty" json:"SSN,omitempty"`

	DLState string `xml:"DLState,omitempty" json:"DLState,omitempty"`

	DLNumber string `xml:"DLNumber,omitempty" json:"DLNumber,omitempty"`

	NotificationMethod *WSNotificationMethod `xml:"NotificationMethod,omitempty" json:"NotificationMethod,omitempty"`
}

type WSRecurringTransaction struct {
	EntityId int32 `xml:"EntityId,omitempty" json:"EntityId,omitempty"`

	LocationId int32 `xml:"LocationId,omitempty" json:"LocationId,omitempty"`

	RecurringPaymentOrigin *WSRecurringPaymentOrigin `xml:"RecurringPaymentOrigin,omitempty" json:"RecurringPaymentOrigin,omitempty"`

	EffectiveDate soap.XSDDateTime `xml:"EffectiveDate,omitempty" json:"EffectiveDate,omitempty"`

	Description string `xml:"Description,omitempty" json:"Description,omitempty"`

	TotalAmount float64 `xml:"TotalAmount,omitempty" json:"TotalAmount,omitempty"`

	BatchNumber string `xml:"BatchNumber,omitempty" json:"BatchNumber,omitempty"`

	TransactionNumber string `xml:"TransactionNumber,omitempty" json:"TransactionNumber,omitempty"`

	Field1 string `xml:"Field1,omitempty" json:"Field1,omitempty"`

	Field2 string `xml:"Field2,omitempty" json:"Field2,omitempty"`

	Field3 string `xml:"Field3,omitempty" json:"Field3,omitempty"`

	RoutingNumber string `xml:"RoutingNumber,omitempty" json:"RoutingNumber,omitempty"`

	AccountNumber string `xml:"AccountNumber,omitempty" json:"AccountNumber,omitempty"`

	CheckNumber string `xml:"CheckNumber,omitempty" json:"CheckNumber,omitempty"`

	IsBusinessPayment bool `xml:"IsBusinessPayment,omitempty" json:"IsBusinessPayment,omitempty"`

	NameOnAccount string `xml:"NameOnAccount,omitempty" json:"NameOnAccount,omitempty"`

	IpAddressOfOriginator string `xml:"IpAddressOfOriginator,omitempty" json:"IpAddressOfOriginator,omitempty"`

	FaceFeeType *WSFaceFeeType `xml:"FaceFeeType,omitempty" json:"FaceFeeType,omitempty"`

	AccountType *WSRecurringAccountType `xml:"AccountType,omitempty" json:"AccountType,omitempty"`
}

type WSAddendaTransaction struct {
	EntityId int32 `xml:"EntityId,omitempty" json:"EntityId,omitempty"`

	LocationId int32 `xml:"LocationId,omitempty" json:"LocationId,omitempty"`

	PaymentOrigin *WSPaymentOrigin `xml:"PaymentOrigin,omitempty" json:"PaymentOrigin,omitempty"`

	AccountType *WSAccountType `xml:"AccountType,omitempty" json:"AccountType,omitempty"`

	OperationType *WSOperationType `xml:"OperationType,omitempty" json:"OperationType,omitempty"`

	SettlementType *WSSettlementType `xml:"SettlementType,omitempty" json:"SettlementType,omitempty"`

	TransactionStatus *WSTransactionStatus `xml:"TransactionStatus,omitempty" json:"TransactionStatus,omitempty"`

	SettlementStatus *WSSettlementStatus `xml:"SettlementStatus,omitempty" json:"SettlementStatus,omitempty"`

	EffectiveDate soap.XSDDateTime `xml:"EffectiveDate,omitempty" json:"EffectiveDate,omitempty"`

	Description string `xml:"Description,omitempty" json:"Description,omitempty"`

	TotalAmount float64 `xml:"TotalAmount,omitempty" json:"TotalAmount,omitempty"`

	BatchNumber string `xml:"BatchNumber,omitempty" json:"BatchNumber,omitempty"`

	TerminalNumber string `xml:"TerminalNumber,omitempty" json:"TerminalNumber,omitempty"`

	TransactionNumber string `xml:"TransactionNumber,omitempty" json:"TransactionNumber,omitempty"`

	Field1 string `xml:"Field1,omitempty" json:"Field1,omitempty"`

	Field2 string `xml:"Field2,omitempty" json:"Field2,omitempty"`

	Field3 string `xml:"Field3,omitempty" json:"Field3,omitempty"`

	RoutingNumber string `xml:"RoutingNumber,omitempty" json:"RoutingNumber,omitempty"`

	AccountNumber string `xml:"AccountNumber,omitempty" json:"AccountNumber,omitempty"`

	CheckNumber string `xml:"CheckNumber,omitempty" json:"CheckNumber,omitempty"`

	IsBusinessPayment bool `xml:"IsBusinessPayment,omitempty" json:"IsBusinessPayment,omitempty"`

	NameOnAccount string `xml:"NameOnAccount,omitempty" json:"NameOnAccount,omitempty"`

	IpAddressOfOriginator string `xml:"IpAddressOfOriginator,omitempty" json:"IpAddressOfOriginator,omitempty"`

	NotificationMethod *WSNotificationMethod `xml:"NotificationMethod,omitempty" json:"NotificationMethod,omitempty"`

	FaceFeeType *WSFaceFeeType `xml:"FaceFeeType,omitempty" json:"FaceFeeType,omitempty"`

	OwnerApplication *WSOwnerApplication `xml:"OwnerApplication,omitempty" json:"OwnerApplication,omitempty"`

	IsHealthcareClaimPmt bool `xml:"IsHealthcareClaimPmt,omitempty" json:"IsHealthcareClaimPmt,omitempty"`

	Addenda *ArrayOfString `xml:"Addenda,omitempty" json:"Addenda,omitempty"`
}

type ArrayOfString struct {
	Astring []*string `xml:"string,omitempty" json:"string,omitempty"`
}

type ArrayOfWSTransaction struct {
	WSTransaction []*WSTransaction `xml:"WSTransaction,omitempty" json:"WSTransaction,omitempty"`
}

type WSTransaction2 struct {
	*WSTransaction

	ReferenceNumber string `xml:"ReferenceNumber,omitempty" json:"ReferenceNumber,omitempty"`
}

type TransactionProcessingSoap interface {
	CreateProcessingBatch(request *CreateProcessingBatch) (*CreateProcessingBatchResponse, error)

	CreateProcessingBatchContext(ctx context.Context, request *CreateProcessingBatch) (*CreateProcessingBatchResponse, error)

	CreateProcessingBatchWithDepositSlipAuxOnUs(request *CreateProcessingBatchWithDepositSlipAuxOnUs) (*CreateProcessingBatchWithDepositSlipAuxOnUsResponse, error)

	CreateProcessingBatchWithDepositSlipAuxOnUsContext(ctx context.Context, request *CreateProcessingBatchWithDepositSlipAuxOnUs) (*CreateProcessingBatchWithDepositSlipAuxOnUsResponse, error)

	CloseProcessingBatch(request *CloseProcessingBatch) (*CloseProcessingBatchResponse, error)

	CloseProcessingBatchContext(ctx context.Context, request *CloseProcessingBatch) (*CloseProcessingBatchResponse, error)

	GetBatch(request *GetBatch) (*GetBatchResponse, error)

	GetBatchContext(ctx context.Context, request *GetBatch) (*GetBatchResponse, error)

	GetAllOpenBatches(request *GetAllOpenBatches) (*GetAllOpenBatchesResponse, error)

	GetAllOpenBatchesContext(ctx context.Context, request *GetAllOpenBatches) (*GetAllOpenBatchesResponse, error)

	CloseAllOpenBatches(request *CloseAllOpenBatches) (*CloseAllOpenBatchesResponse, error)

	CloseAllOpenBatchesContext(ctx context.Context, request *CloseAllOpenBatches) (*CloseAllOpenBatchesResponse, error)

	UpdateAutoCloseDateTime(request *UpdateAutoCloseDateTime) (*UpdateAutoCloseDateTimeResponse, error)

	UpdateAutoCloseDateTimeContext(ctx context.Context, request *UpdateAutoCloseDateTime) (*UpdateAutoCloseDateTimeResponse, error)

	AuthorizeTransactionWithCustomer(request *AuthorizeTransactionWithCustomer) (*AuthorizeTransactionWithCustomerResponse, error)

	AuthorizeTransactionWithCustomerContext(ctx context.Context, request *AuthorizeTransactionWithCustomer) (*AuthorizeTransactionWithCustomerResponse, error)

	AuthorizeTransaction(request *AuthorizeTransaction) (*AuthorizeTransactionResponse, error)

	AuthorizeTransactionContext(ctx context.Context, request *AuthorizeTransaction) (*AuthorizeTransactionResponse, error)

	AuthorizeAcctVerifyTransaction(request *AuthorizeAcctVerifyTransaction) (*AuthorizeAcctVerifyTransactionResponse, error)

	AuthorizeAcctVerifyTransactionContext(ctx context.Context, request *AuthorizeAcctVerifyTransaction) (*AuthorizeAcctVerifyTransactionResponse, error)

	VoidTransaction(request *VoidTransaction) (*VoidTransactionResponse, error)

	VoidTransactionContext(ctx context.Context, request *VoidTransaction) (*VoidTransactionResponse, error)

	RefundTransaction(request *RefundTransaction) (*RefundTransactionResponse, error)

	RefundTransactionContext(ctx context.Context, request *RefundTransaction) (*RefundTransactionResponse, error)

	RefundCardTransaction(request *RefundCardTransaction) (*RefundCardTransactionResponse, error)

	RefundCardTransactionContext(ctx context.Context, request *RefundCardTransaction) (*RefundCardTransactionResponse, error)

	CaptureTransaction(request *CaptureTransaction) (*CaptureTransactionResponse, error)

	CaptureTransactionContext(ctx context.Context, request *CaptureTransaction) (*CaptureTransactionResponse, error)

	AuthorizeRecurringTransaction(request *AuthorizeRecurringTransaction) (*AuthorizeRecurringTransactionResponse, error)

	AuthorizeRecurringTransactionContext(ctx context.Context, request *AuthorizeRecurringTransaction) (*AuthorizeRecurringTransactionResponse, error)

	AuthorizeTransactionWithAddenda(request *AuthorizeTransactionWithAddenda) (*AuthorizeTransactionWithAddendaResponse, error)

	AuthorizeTransactionWithAddendaContext(ctx context.Context, request *AuthorizeTransactionWithAddenda) (*AuthorizeTransactionWithAddendaResponse, error)

	GetTransaction(request *GetTransaction) (*GetTransactionResponse, error)

	GetTransactionContext(ctx context.Context, request *GetTransaction) (*GetTransactionResponse, error)

	GetTransactionByField1(request *GetTransactionByField1) (*GetTransactionByField1Response, error)

	GetTransactionByField1Context(ctx context.Context, request *GetTransactionByField1) (*GetTransactionByField1Response, error)

	GetTransactionByTransactionNumber(request *GetTransactionByTransactionNumber) (*GetTransactionByTransactionNumberResponse, error)

	GetTransactionByTransactionNumberContext(ctx context.Context, request *GetTransactionByTransactionNumber) (*GetTransactionByTransactionNumberResponse, error)

	GetTransactionByTransactionNumber2(request *GetTransactionByTransactionNumber2) (*GetTransactionByTransactionNumber2Response, error)

	GetTransactionByTransactionNumber2Context(ctx context.Context, request *GetTransactionByTransactionNumber2) (*GetTransactionByTransactionNumber2Response, error)

	GetTransactionWithAddenda(request *GetTransactionWithAddenda) (*GetTransactionWithAddendaResponse, error)

	GetTransactionWithAddendaContext(ctx context.Context, request *GetTransactionWithAddenda) (*GetTransactionWithAddendaResponse, error)

	TestCredentials(request *TestCredentials) (*TestCredentialsResponse, error)

	TestCredentialsContext(ctx context.Context, request *TestCredentials) (*TestCredentialsResponse, error)

	TestConnection(request *TestConnection) (*TestConnectionResponse, error)

	TestConnectionContext(ctx context.Context, request *TestConnection) (*TestConnectionResponse, error)

	ValidateAccount(request *ValidateAccount) (*ValidateAccountResponse, error)

	ValidateAccountContext(ctx context.Context, request *ValidateAccount) (*ValidateAccountResponse, error)
}

type transactionProcessingSoap struct {
	client *soap.Client
}

func NewTransactionProcessingSoap(client *soap.Client) TransactionProcessingSoap {
	return &transactionProcessingSoap{
		client: client,
	}
}

func (service *transactionProcessingSoap) CreateProcessingBatchContext(ctx context.Context, request *CreateProcessingBatch) (*CreateProcessingBatchResponse, error) {
	response := new(CreateProcessingBatchResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/CreateProcessingBatch", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) CreateProcessingBatch(request *CreateProcessingBatch) (*CreateProcessingBatchResponse, error) {
	return service.CreateProcessingBatchContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) CreateProcessingBatchWithDepositSlipAuxOnUsContext(ctx context.Context, request *CreateProcessingBatchWithDepositSlipAuxOnUs) (*CreateProcessingBatchWithDepositSlipAuxOnUsResponse, error) {
	response := new(CreateProcessingBatchWithDepositSlipAuxOnUsResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/CreateProcessingBatchWithDepositSlipAuxOnUs", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) CreateProcessingBatchWithDepositSlipAuxOnUs(request *CreateProcessingBatchWithDepositSlipAuxOnUs) (*CreateProcessingBatchWithDepositSlipAuxOnUsResponse, error) {
	return service.CreateProcessingBatchWithDepositSlipAuxOnUsContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) CloseProcessingBatchContext(ctx context.Context, request *CloseProcessingBatch) (*CloseProcessingBatchResponse, error) {
	response := new(CloseProcessingBatchResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/CloseProcessingBatch", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) CloseProcessingBatch(request *CloseProcessingBatch) (*CloseProcessingBatchResponse, error) {
	return service.CloseProcessingBatchContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) GetBatchContext(ctx context.Context, request *GetBatch) (*GetBatchResponse, error) {
	response := new(GetBatchResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/GetBatch", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) GetBatch(request *GetBatch) (*GetBatchResponse, error) {
	return service.GetBatchContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) GetAllOpenBatchesContext(ctx context.Context, request *GetAllOpenBatches) (*GetAllOpenBatchesResponse, error) {
	response := new(GetAllOpenBatchesResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/GetAllOpenBatches", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) GetAllOpenBatches(request *GetAllOpenBatches) (*GetAllOpenBatchesResponse, error) {
	return service.GetAllOpenBatchesContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) CloseAllOpenBatchesContext(ctx context.Context, request *CloseAllOpenBatches) (*CloseAllOpenBatchesResponse, error) {
	response := new(CloseAllOpenBatchesResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/CloseAllOpenBatches", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) CloseAllOpenBatches(request *CloseAllOpenBatches) (*CloseAllOpenBatchesResponse, error) {
	return service.CloseAllOpenBatchesContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) UpdateAutoCloseDateTimeContext(ctx context.Context, request *UpdateAutoCloseDateTime) (*UpdateAutoCloseDateTimeResponse, error) {
	response := new(UpdateAutoCloseDateTimeResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/UpdateAutoCloseDateTime", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) UpdateAutoCloseDateTime(request *UpdateAutoCloseDateTime) (*UpdateAutoCloseDateTimeResponse, error) {
	return service.UpdateAutoCloseDateTimeContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) AuthorizeTransactionWithCustomerContext(ctx context.Context, request *AuthorizeTransactionWithCustomer) (*AuthorizeTransactionWithCustomerResponse, error) {
	response := new(AuthorizeTransactionWithCustomerResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/AuthorizeTransactionWithCustomer", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) AuthorizeTransactionWithCustomer(request *AuthorizeTransactionWithCustomer) (*AuthorizeTransactionWithCustomerResponse, error) {
	return service.AuthorizeTransactionWithCustomerContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) AuthorizeTransactionContext(ctx context.Context, request *AuthorizeTransaction) (*AuthorizeTransactionResponse, error) {
	response := new(AuthorizeTransactionResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/AuthorizeTransaction", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) AuthorizeTransaction(request *AuthorizeTransaction) (*AuthorizeTransactionResponse, error) {
	return service.AuthorizeTransactionContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) AuthorizeAcctVerifyTransactionContext(ctx context.Context, request *AuthorizeAcctVerifyTransaction) (*AuthorizeAcctVerifyTransactionResponse, error) {
	response := new(AuthorizeAcctVerifyTransactionResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/AuthorizeAcctVerifyTransaction", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) AuthorizeAcctVerifyTransaction(request *AuthorizeAcctVerifyTransaction) (*AuthorizeAcctVerifyTransactionResponse, error) {
	return service.AuthorizeAcctVerifyTransactionContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) VoidTransactionContext(ctx context.Context, request *VoidTransaction) (*VoidTransactionResponse, error) {
	response := new(VoidTransactionResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/VoidTransaction", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) VoidTransaction(request *VoidTransaction) (*VoidTransactionResponse, error) {
	return service.VoidTransactionContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) RefundTransactionContext(ctx context.Context, request *RefundTransaction) (*RefundTransactionResponse, error) {
	response := new(RefundTransactionResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/RefundTransaction", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) RefundTransaction(request *RefundTransaction) (*RefundTransactionResponse, error) {
	return service.RefundTransactionContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) RefundCardTransactionContext(ctx context.Context, request *RefundCardTransaction) (*RefundCardTransactionResponse, error) {
	response := new(RefundCardTransactionResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/RefundCardTransaction", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) RefundCardTransaction(request *RefundCardTransaction) (*RefundCardTransactionResponse, error) {
	return service.RefundCardTransactionContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) CaptureTransactionContext(ctx context.Context, request *CaptureTransaction) (*CaptureTransactionResponse, error) {
	response := new(CaptureTransactionResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/CaptureTransaction", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) CaptureTransaction(request *CaptureTransaction) (*CaptureTransactionResponse, error) {
	return service.CaptureTransactionContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) AuthorizeRecurringTransactionContext(ctx context.Context, request *AuthorizeRecurringTransaction) (*AuthorizeRecurringTransactionResponse, error) {
	response := new(AuthorizeRecurringTransactionResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/AuthorizeRecurringTransaction", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) AuthorizeRecurringTransaction(request *AuthorizeRecurringTransaction) (*AuthorizeRecurringTransactionResponse, error) {
	return service.AuthorizeRecurringTransactionContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) AuthorizeTransactionWithAddendaContext(ctx context.Context, request *AuthorizeTransactionWithAddenda) (*AuthorizeTransactionWithAddendaResponse, error) {
	response := new(AuthorizeTransactionWithAddendaResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/AuthorizeTransactionWithAddenda", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) AuthorizeTransactionWithAddenda(request *AuthorizeTransactionWithAddenda) (*AuthorizeTransactionWithAddendaResponse, error) {
	return service.AuthorizeTransactionWithAddendaContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) GetTransactionContext(ctx context.Context, request *GetTransaction) (*GetTransactionResponse, error) {
	response := new(GetTransactionResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/GetTransaction", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) GetTransaction(request *GetTransaction) (*GetTransactionResponse, error) {
	return service.GetTransactionContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) GetTransactionByField1Context(ctx context.Context, request *GetTransactionByField1) (*GetTransactionByField1Response, error) {
	response := new(GetTransactionByField1Response)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/GetTransactionByField1", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) GetTransactionByField1(request *GetTransactionByField1) (*GetTransactionByField1Response, error) {
	return service.GetTransactionByField1Context(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) GetTransactionByTransactionNumberContext(ctx context.Context, request *GetTransactionByTransactionNumber) (*GetTransactionByTransactionNumberResponse, error) {
	response := new(GetTransactionByTransactionNumberResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/GetTransactionByTransactionNumber", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) GetTransactionByTransactionNumber(request *GetTransactionByTransactionNumber) (*GetTransactionByTransactionNumberResponse, error) {
	return service.GetTransactionByTransactionNumberContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) GetTransactionByTransactionNumber2Context(ctx context.Context, request *GetTransactionByTransactionNumber2) (*GetTransactionByTransactionNumber2Response, error) {
	response := new(GetTransactionByTransactionNumber2Response)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/GetTransactionByTransactionNumber2", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) GetTransactionByTransactionNumber2(request *GetTransactionByTransactionNumber2) (*GetTransactionByTransactionNumber2Response, error) {
	return service.GetTransactionByTransactionNumber2Context(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) GetTransactionWithAddendaContext(ctx context.Context, request *GetTransactionWithAddenda) (*GetTransactionWithAddendaResponse, error) {
	response := new(GetTransactionWithAddendaResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/GetTransactionWithAddenda", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) GetTransactionWithAddenda(request *GetTransactionWithAddenda) (*GetTransactionWithAddendaResponse, error) {
	return service.GetTransactionWithAddendaContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) TestCredentialsContext(ctx context.Context, request *TestCredentials) (*TestCredentialsResponse, error) {
	response := new(TestCredentialsResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/TestCredentials", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) TestCredentials(request *TestCredentials) (*TestCredentialsResponse, error) {
	return service.TestCredentialsContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) TestConnectionContext(ctx context.Context, request *TestConnection) (*TestConnectionResponse, error) {
	response := new(TestConnectionResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/TestConnection", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) TestConnection(request *TestConnection) (*TestConnectionResponse, error) {
	return service.TestConnectionContext(
		context.Background(),
		request,
	)
}

func (service *transactionProcessingSoap) ValidateAccountContext(ctx context.Context, request *ValidateAccount) (*ValidateAccountResponse, error) {
	response := new(ValidateAccountResponse)
	err := service.client.CallContext(ctx, "https://ssl.selectpayment.com/PV/ValidateAccount", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *transactionProcessingSoap) ValidateAccount(request *ValidateAccount) (*ValidateAccountResponse, error) {
	return service.ValidateAccountContext(
		context.Background(),
		request,
	)
}
